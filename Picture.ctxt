#BlueJ class context
comment0.params=
comment0.target=Picture()
comment0.text=\n\ Constructor\ that\ takes\ no\ arguments\n
comment1.params=
comment1.target=void\ gray()
comment10.params=source\ option
comment10.target=void\ copyflowerSmaller(Picture,\ java.lang.String)
comment11.params=fileName
comment11.target=Picture(java.lang.String)
comment11.text=\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\n
comment12.params=width\ height
comment12.target=Picture(int,\ int)
comment12.text=\n\ Constructor\ that\ takes\ the\ width\ and\ height\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\n
comment13.params=copyPicture
comment13.target=Picture(Picture)
comment13.text=\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\n\ copy\ of\ that\ picture\n
comment14.params=image
comment14.target=Picture(java.awt.image.BufferedImage)
comment14.text=\n\ Constructor\ that\ takes\ a\ buffered\ image\n\ @param\ image\ the\ buffered\ image\ to\ use\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ Method\ to\ return\ a\ string\ with\ information\ about\ this\ picture.\n\ @return\ a\ string\ with\ information\ about\ the\ picture\ such\ as\ fileName,\n\ height\ and\ width.\n
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ hair()
comment3.params=
comment3.target=void\ invert()
comment4.params=sourcePicture\ divide\ xpos\ ypos
comment4.target=void\ recursive(Picture,\ int,\ int,\ int)
comment5.params=sourcePicture\ xpos\ ypos
comment5.target=void\ rotate(Picture,\ int,\ int)
comment6.params=sourcePicture\ xpos\ ypos
comment6.target=void\ copy(Picture,\ int,\ int)
comment6.text=\ \ \ \n\ \ \ \ public\ void\ pixel(Picture\ source)\n\ \ \ \ {\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ for\ (int\ sourceX\ \=\ 0,\ targetX\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ sourceX\ <\ sourcePicture.getWidth();\n\ \ \ \ \ \ \ \ \ \ \ \ sourceX\ +\=\ 20,\ targetX\ +\=\ 20)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (int\ sourceY\ \=\ 0,\ targetY\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ sourceY\ <\ sourcePicture.getHeight();\n\ \ \ \ \ \ \ \ \ \ \ \ sourceY\ +\=\ 20,\ targetY\ +\=\ 20)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //sets\ the\ target\ pixel\ color\ to\ the\ source\ pixel\ color\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sourcePixel\ \=\ sourcePicture.getPixel(sourceX,\ sourceY);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ targetPixel\ \=\ this.getPixel(targetX,\ targetY);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ targetPixel.setColor(sourcePixel.getColor());\n\ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }\n
comment7.params=
comment7.target=void\ mirrorVertical()
comment7.text=\n\ mirrors\ around\ a\ vertical\ line\ in\ the\ middle\ of\ the\ picture\n\ based\ on\ its\ width\n
comment8.params=
comment8.target=void\ mirrorHorizontal()
comment8.text=\n\ mirrors\ around\ a\ horizontal\ line\ in\ the\ middle\ of\ the\ picture\n\ based\ on\ its\ width\n
comment9.params=
comment9.target=void\ mirrorTemple()
numComments=17
